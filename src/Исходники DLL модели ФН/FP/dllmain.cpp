// dllmain.cpp : Определяет точку входа для приложения DLL.
#include "pch.h"
#include "fp.h"

//---------------------------------------------------------------------------
#define MODEL_KEY 0x00000000 // - код авторизации от Labcenter Electronics
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//--- Ключевое слово __declspec с атрибутом dllexport помечает функцию как
//--- экспортируемую, имя функции добавляется в таблицу экспорта dll.
//---------------------------------------------------------------------------
//--- Функция IDSIMMODEL * createdsimmodel(...) реализуется для цифровой модели,
//--- для функционирования режима пакетной обработки (batch mode operation).
//--- Proteus может работать в интерактивном режиме, когда симуляция выполняется
//--- в реальном времени, либо в пакетном режиме (batch mode), когда симуляция
//--- осуществляется просто так быстро, как это возможно.
//--- 
//--- Параметры функции:
// CHAR* device - тип примитива в среде симлятора, к которому присоединена ваша активная модель.
//--- Вы можете использовать этот параметр, чтобы реализовать различные другие
//--- DSIM классы модели в пределах одной DLL, или поддерживать различные изменения
//--- в её поведении определённому типу имени, указанному в параметре PRIMTIVE
//--- текстового скрипта модели.
// ILICENCESERVER* ils - интерфейс к лицензионному серверу (Licence Server).
//--- Ваша активная модель должна пройти процедуру лицензирования,
//--- по коду model_key от Labcenter Electronics, иначе она не будет обслуживаться.
//--- Чисто коммерческая опция.

//--- Возвращаемая величина:
// IDSIMMODEL*   - указатель на класс в вашей модели, который должен быть производным от IDSIMMODEL интерфейса.

extern "C" IDSIMMODEL __declspec(dllexport)* createdsimmodel(CHAR* device, ILICENCESERVER* ils) {
	if (ils->authorize(MODEL_KEY)) {
		//MessageBox(0, L"Модель прошла авторизацию!", L"Внимание!", MB_ICONERROR);
		return new FP();
	} else {
		MessageBox(0, L"Авторизация модели не прошла: [NULL]!", L"Внимание!", MB_ICONERROR);
		return NULL;
	}
}

//---------------------------------------------------------------------------
//--- deletedsimmodel -  вызывается PROSPICE, когда пользователь заканчивает сеанс симуляции.
//--- Функция должна освободить все ресурсы, которые содержала модель, обычно вызывая
//--- деструктор.

extern "C" VOID __declspec(dllexport) deletedsimmodel(IDSIMMODEL* model) {
	delete (FP*)model; // cast to FP ptr_type
}

//---------------------------------------------------------------------------
// DllMain - DLL entry point
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fwdreason, LPVOID lpvReserved) {
	//if(fwdreason == DLL_PROCESS_ATTACH) { // Если проецируется на адр.простр.
	//		 MessageBox(0, L"DLL проецируется на адресное пространство", L"Внимание!", MB_ICONERROR);
	//}
	return 1;
}
//---------------------------------------------------------------------------
/* В Win32 определена специальная функция обратного вызова (Callback-function)
системного уровня с именем, которое может задаваться пользователем
(это пользовательская функция, вызываемая системой).
Как правило, на нее ссылаются как на DllEntryPoint. Но DllEntryPoint может иметь
практически любое имя; иногда это DllMain.
Когда вызывается функция Win API LoadLibrary(), модуль DLL загружается в память.
Затем вызываетяс код инициализации библиотеки.
Система проверяет, экспортирует ли программист в модуле функцию DllEntryPoint и
задал ли он её имя при помощи компоновщика.
Если имело место и то, и другое, система вызывает функцию DllEntryPoint. Прототип
этой функции на языке С:
BOOL WINAPI DllEntryPoint(HINSTANCE hinstDLL,  дескриптор библиотеки
						  DWORD fdwReason,     флаг причины вызова
						  LPVOID lpvReserved); детализация вызова
Параметр fdwReason:DWORD содержит значение, соответствующее причине, по которой
была вызвана функция DllEntryPoint.
Система вызывает DllEntryPoint в четырех случаях; соответственно, fdwReason может
иметь одно из четырех значений:
   DLL_PROCESS_ATTACH Процесс отображает DLL в своё адресное пространство
   DLL_PROCESS_DETACH Процесс прекращает отображение DLL в своё адресное пространство
   DLL_THREAD_ATTACH Создается поток в адресном пространстве процесса, отобразившего DLL
   DLL_THREAD_DETACH Поток, находившийся в том же адресном пространстве, куда отображена
					 DLL, удаляется.*/
//---------------------------------------------------------------------------